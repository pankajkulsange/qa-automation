pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to checkout')
        string(name: 'TAGS', defaultValue: '@smoke', description: 'Cucumber tags to run (e.g., @smoke, @regression)')
        choice(name: 'BROWSER', choices: ['chrome', 'firefox'], description: 'Browser to run tests on')
        choice(name: 'ENV', choices: ['local', 'staging', 'production'], description: 'Environment to test against')
        string(name: 'THREADS', defaultValue: '1', description: 'Number of parallel threads')
        booleanParam(name: 'HEADLESS', defaultValue: true, description: 'Run browser in headless mode')
        booleanParam(name: 'USE_DOCKER', defaultValue: false, description: 'Use Docker containers for execution')
    }
    
    environment {
        MAVEN_OPTS = '-Xmx2048m'
        PROJECT_PATH = 'D:/projects/first-project/qa-automation'
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Using project at: ${PROJECT_PATH}"
                    dir("${PROJECT_PATH}") {
                        echo "Project directory contents:"
                        bat 'dir'
                    }
                }
            }
        }
        
        stage('Setup Selenium Grid') {
            when {
                expression { params.USE_DOCKER == true }
            }
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        echo "Starting Selenium Grid..."
                        bat 'docker-compose up -d selenium-hub chrome'
                        
                        echo "Waiting for Selenium Grid to be ready..."
                        // Simple wait using PowerShell
                        powershell '''
                            $maxAttempts = 30
                            $attempt = 0
                            do {
                                try {
                                    $response = Invoke-WebRequest -Uri "http://localhost:4444/wd/hub/status" -UseBasicParsing -TimeoutSec 5
                                    if ($response.Content -match '"ready":true') {
                                        Write-Host "Selenium Grid is ready!"
                                        break
                                    }
                                } catch {
                                    Write-Host "Grid not ready yet, attempt $($attempt + 1)/$maxAttempts"
                                }
                                $attempt++
                                Start-Sleep -Seconds 2
                            } while ($attempt -lt $maxAttempts)
                            
                            if ($attempt -eq $maxAttempts) {
                                Write-Host "Warning: Selenium Grid may not be fully ready"
                            }
                        '''
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        def cucumberOptions = "--tags '${params.TAGS}' --plugin html:target/cucumber-reports/html --plugin json:target/cucumber-reports/cucumber.json --plugin junit:target/cucumber-reports/junit.xml"
                        
                        if (params.USE_DOCKER) {
                            echo "Running tests in Docker container..."
                            bat """
                                docker run --rm ^
                                    --network qa-automation_qa-network ^
                                    -v ${PROJECT_PATH}:/app ^
                                    -v maven-repo:/root/.m2 ^
                                    -e MAVEN_OPTS="-Xmx2048m" ^
                                    maven:3.9.5-openjdk-11 ^
                                    sh -c "cd /app && mvn clean test -Dbrowser=${params.BROWSER} -Denv=${params.ENV} -Dheadless=${params.HEADLESS} -Dthreads=${params.THREADS} -Dcucumber.options='${cucumberOptions}' -Dselenium.grid.enabled=true -Dselenium.grid.url=http://selenium-hub:4444/wd/hub"
                            """
                        } else {
                            echo "Running tests locally..."
                            bat """
                                mvn clean test ^
                                    -Dbrowser=${params.BROWSER} ^
                                    -Denv=${params.ENV} ^
                                    -Dheadless=${params.HEADLESS} ^
                                    -Dthreads=${params.THREADS} ^
                                    -Dcucumber.options="${cucumberOptions}" ^
                                    -Dselenium.grid.enabled=false
                            """
                        }
                    }
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        if (params.USE_DOCKER) {
                            bat """
                                docker run --rm ^
                                    --network qa-automation_qa-network ^
                                    -v ${PROJECT_PATH}:/app ^
                                    -v maven-repo:/root/.m2 ^
                                    maven:3.9.5-openjdk-11 ^
                                    sh -c "cd /app && mvn verify"
                            """
                        } else {
                            bat 'mvn verify'
                        }
                    }
                }
            }
        }
        
        stage('Archive Reports') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        // Archive test reports
                        archiveArtifacts artifacts: 'target/cucumber-reports/**/*', fingerprint: true
                        archiveArtifacts artifacts: 'target/surefire-reports/**/*', fingerprint: true
                        
                        // Publish test results
                        publishTestResults testResultsPattern: 'target/cucumber-reports/junit.xml'
                        
                        // Publish HTML reports
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'target/cucumber-reports/html',
                            reportFiles: 'index.html',
                            reportName: 'Cucumber HTML Report',
                            reportTitles: 'Cucumber Test Results'
                        ])
                    }
                }
            }
        }
        
        stage('Cleanup') {
            when {
                expression { params.USE_DOCKER == true }
            }
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        echo "Cleaning up Docker containers..."
                        bat 'docker-compose down'
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                if (params.USE_DOCKER) {
                    dir("${PROJECT_PATH}") {
                        echo "Final cleanup..."
                        bat 'docker-compose down || exit /b 0'
                    }
                }
                
                // Publish test results even if build fails
                dir("${PROJECT_PATH}") {
                    publishTestResults testResultsPattern: 'target/cucumber-reports/junit.xml'
                }
            }
        }
        
        success {
            echo '‚úÖ Build successful!'
            echo 'üìä Reports available in target/cucumber-reports/'
        }
        
        failure {
            echo '‚ùå Build failed!'
            echo 'Check the console output for details.'
        }
        
        unstable {
            echo '‚ö†Ô∏è Build unstable!'
            echo 'Some tests failed but build completed.'
        }
    }
}
